/*
Klarity Integrations

REST API for managing Estate Records using Klarity Integrations. You can enrich your estate by creating new kinds of estate records or extending existing ones. Before making use of the API, you must first register your External Integration in Klarity, which provides you with the required authentication credentials. Then, you use those credentials to obtain a Token that allows you to make authorized calls to Klarityâ€™s REST API for External Integration.

API version: 0.0.2
Contact: products@nordcloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integrations

import (
	"encoding/json"
	"fmt"
)

// PeriodEnum Enum type of billing periods available in External Integrations.
type PeriodEnum string

// List of PeriodEnum
const (
	CURRENT PeriodEnum = "current"
	PREVIOUS PeriodEnum = "previous"
	ALL PeriodEnum = "all"
)

var allowedPeriodEnumEnumValues = []PeriodEnum{
	"current",
	"previous",
	"all",
}

func (v *PeriodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PeriodEnum(value)
	for _, existing := range allowedPeriodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PeriodEnum", value)
}

// NewPeriodEnumFromValue returns a pointer to a valid PeriodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPeriodEnumFromValue(v string) (*PeriodEnum, error) {
	ev := PeriodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PeriodEnum: valid values are %v", v, allowedPeriodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PeriodEnum) IsValid() bool {
	for _, existing := range allowedPeriodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PeriodEnum value
func (v PeriodEnum) Ptr() *PeriodEnum {
	return &v
}

type NullablePeriodEnum struct {
	value *PeriodEnum
	isSet bool
}

func (v NullablePeriodEnum) Get() *PeriodEnum {
	return v.value
}

func (v *NullablePeriodEnum) Set(val *PeriodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodEnum(val *PeriodEnum) *NullablePeriodEnum {
	return &NullablePeriodEnum{value: val, isSet: true}
}

func (v NullablePeriodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

