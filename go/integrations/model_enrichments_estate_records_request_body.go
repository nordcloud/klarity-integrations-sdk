/*
Klarity Integrations

REST API for managing Estate Records using Klarity Integrations. You can enrich your estate by creating new kinds of estate records or extending existing ones. Before making use of the API, you must first register your External Integration in Klarity, which provides you with the required authentication credentials. Then, you use those credentials to obtain a Token that allows you to make authorized calls to Klarityâ€™s REST API for External Integration.

API version: 0.0.4
Contact: products@nordcloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integrations

import (
	"encoding/json"
)

// EnrichmentsEstateRecordsRequestBody struct for EnrichmentsEstateRecordsRequestBody
type EnrichmentsEstateRecordsRequestBody struct {
	Enrichments []EnrichmentsEstateRecordsRequestBodyEnrichments `json:"enrichments"`
	AdditionalProperties map[string]interface{}
}

type _EnrichmentsEstateRecordsRequestBody EnrichmentsEstateRecordsRequestBody

// NewEnrichmentsEstateRecordsRequestBody instantiates a new EnrichmentsEstateRecordsRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichmentsEstateRecordsRequestBody(enrichments []EnrichmentsEstateRecordsRequestBodyEnrichments) *EnrichmentsEstateRecordsRequestBody {
	this := EnrichmentsEstateRecordsRequestBody{}
	this.Enrichments = enrichments
	return &this
}

// NewEnrichmentsEstateRecordsRequestBodyWithDefaults instantiates a new EnrichmentsEstateRecordsRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentsEstateRecordsRequestBodyWithDefaults() *EnrichmentsEstateRecordsRequestBody {
	this := EnrichmentsEstateRecordsRequestBody{}
	return &this
}

// GetEnrichments returns the Enrichments field value
func (o *EnrichmentsEstateRecordsRequestBody) GetEnrichments() []EnrichmentsEstateRecordsRequestBodyEnrichments {
	if o == nil {
		var ret []EnrichmentsEstateRecordsRequestBodyEnrichments
		return ret
	}

	return o.Enrichments
}

// GetEnrichmentsOk returns a tuple with the Enrichments field value
// and a boolean to check if the value has been set.
func (o *EnrichmentsEstateRecordsRequestBody) GetEnrichmentsOk() (*[]EnrichmentsEstateRecordsRequestBodyEnrichments, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enrichments, true
}

// SetEnrichments sets field value
func (o *EnrichmentsEstateRecordsRequestBody) SetEnrichments(v []EnrichmentsEstateRecordsRequestBodyEnrichments) {
	o.Enrichments = v
}

func (o EnrichmentsEstateRecordsRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enrichments"] = o.Enrichments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EnrichmentsEstateRecordsRequestBody) UnmarshalJSON(bytes []byte) (err error) {
	varEnrichmentsEstateRecordsRequestBody := _EnrichmentsEstateRecordsRequestBody{}

	if err = json.Unmarshal(bytes, &varEnrichmentsEstateRecordsRequestBody); err == nil {
		*o = EnrichmentsEstateRecordsRequestBody(varEnrichmentsEstateRecordsRequestBody)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "enrichments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnrichmentsEstateRecordsRequestBody struct {
	value *EnrichmentsEstateRecordsRequestBody
	isSet bool
}

func (v NullableEnrichmentsEstateRecordsRequestBody) Get() *EnrichmentsEstateRecordsRequestBody {
	return v.value
}

func (v *NullableEnrichmentsEstateRecordsRequestBody) Set(val *EnrichmentsEstateRecordsRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentsEstateRecordsRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentsEstateRecordsRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentsEstateRecordsRequestBody(val *EnrichmentsEstateRecordsRequestBody) *NullableEnrichmentsEstateRecordsRequestBody {
	return &NullableEnrichmentsEstateRecordsRequestBody{value: val, isSet: true}
}

func (v NullableEnrichmentsEstateRecordsRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentsEstateRecordsRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


