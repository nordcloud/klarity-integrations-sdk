/*
Klarity Integrations

REST API for managing Estate Records using Klarity Integrations. You can enrich your estate by creating new kinds of estate records or extending existing ones. Before making use of the API, you must first register your External Integration in Klarity, which provides you with the required authentication credentials. Then, you use those credentials to obtain a Token that allows you to make authorized calls to Klarityâ€™s REST API for External Integration.

API version: 0.0.4
Contact: products@nordcloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integrations

import (
	"encoding/json"
)

// EnrichmentsEstateRecordsRequestBodyEnrichments struct for EnrichmentsEstateRecordsRequestBodyEnrichments
type EnrichmentsEstateRecordsRequestBodyEnrichments struct {
	Record EnrichmentRecord `json:"record"`
	// Data contains an arbitrary JSON object with enrichment of the record. Can not be empty object. Maximum object size is 1MB. 
	Data map[string]interface{} `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _EnrichmentsEstateRecordsRequestBodyEnrichments EnrichmentsEstateRecordsRequestBodyEnrichments

// NewEnrichmentsEstateRecordsRequestBodyEnrichments instantiates a new EnrichmentsEstateRecordsRequestBodyEnrichments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichmentsEstateRecordsRequestBodyEnrichments(record EnrichmentRecord, data map[string]interface{}) *EnrichmentsEstateRecordsRequestBodyEnrichments {
	this := EnrichmentsEstateRecordsRequestBodyEnrichments{}
	this.Record = record
	this.Data = data
	return &this
}

// NewEnrichmentsEstateRecordsRequestBodyEnrichmentsWithDefaults instantiates a new EnrichmentsEstateRecordsRequestBodyEnrichments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentsEstateRecordsRequestBodyEnrichmentsWithDefaults() *EnrichmentsEstateRecordsRequestBodyEnrichments {
	this := EnrichmentsEstateRecordsRequestBodyEnrichments{}
	return &this
}

// GetRecord returns the Record field value
func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) GetRecord() EnrichmentRecord {
	if o == nil {
		var ret EnrichmentRecord
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) GetRecordOk() (*EnrichmentRecord, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) SetRecord(v EnrichmentRecord) {
	o.Record = v
}

// GetData returns the Data field value
func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o EnrichmentsEstateRecordsRequestBodyEnrichments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["record"] = o.Record
	}
	if true {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EnrichmentsEstateRecordsRequestBodyEnrichments) UnmarshalJSON(bytes []byte) (err error) {
	varEnrichmentsEstateRecordsRequestBodyEnrichments := _EnrichmentsEstateRecordsRequestBodyEnrichments{}

	if err = json.Unmarshal(bytes, &varEnrichmentsEstateRecordsRequestBodyEnrichments); err == nil {
		*o = EnrichmentsEstateRecordsRequestBodyEnrichments(varEnrichmentsEstateRecordsRequestBodyEnrichments)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "record")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnrichmentsEstateRecordsRequestBodyEnrichments struct {
	value *EnrichmentsEstateRecordsRequestBodyEnrichments
	isSet bool
}

func (v NullableEnrichmentsEstateRecordsRequestBodyEnrichments) Get() *EnrichmentsEstateRecordsRequestBodyEnrichments {
	return v.value
}

func (v *NullableEnrichmentsEstateRecordsRequestBodyEnrichments) Set(val *EnrichmentsEstateRecordsRequestBodyEnrichments) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentsEstateRecordsRequestBodyEnrichments) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentsEstateRecordsRequestBodyEnrichments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentsEstateRecordsRequestBodyEnrichments(val *EnrichmentsEstateRecordsRequestBodyEnrichments) *NullableEnrichmentsEstateRecordsRequestBodyEnrichments {
	return &NullableEnrichmentsEstateRecordsRequestBodyEnrichments{value: val, isSet: true}
}

func (v NullableEnrichmentsEstateRecordsRequestBodyEnrichments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentsEstateRecordsRequestBodyEnrichments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


