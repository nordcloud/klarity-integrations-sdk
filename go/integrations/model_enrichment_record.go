/*
Klarity Integrations

REST API for managing Estate Records using Klarity Integrations. You can enrich your estate by creating new kinds of estate records or extending existing ones. Before making use of the API, you must first register your External Integration in Klarity, which provides you with the required authentication credentials. Then, you use those credentials to obtain a Token that allows you to make authorized calls to Klarityâ€™s REST API for External Integration.

API version: 0.0.5
Contact: products@nordcloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integrations

import (
	"encoding/json"
)

// checks if the EnrichmentRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrichmentRecord{}

// EnrichmentRecord Identifies enriched record. Nid is currently required, since it is the only option to identify record. 
type EnrichmentRecord struct {
	// Nordcloud ID of a resource in Klarity.
	Nid *string `json:"nid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnrichmentRecord EnrichmentRecord

// NewEnrichmentRecord instantiates a new EnrichmentRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichmentRecord() *EnrichmentRecord {
	this := EnrichmentRecord{}
	return &this
}

// NewEnrichmentRecordWithDefaults instantiates a new EnrichmentRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentRecordWithDefaults() *EnrichmentRecord {
	this := EnrichmentRecord{}
	return &this
}

// GetNid returns the Nid field value if set, zero value otherwise.
func (o *EnrichmentRecord) GetNid() string {
	if o == nil || IsNil(o.Nid) {
		var ret string
		return ret
	}
	return *o.Nid
}

// GetNidOk returns a tuple with the Nid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentRecord) GetNidOk() (*string, bool) {
	if o == nil || IsNil(o.Nid) {
		return nil, false
	}
	return o.Nid, true
}

// HasNid returns a boolean if a field has been set.
func (o *EnrichmentRecord) HasNid() bool {
	if o != nil && !IsNil(o.Nid) {
		return true
	}

	return false
}

// SetNid gets a reference to the given string and assigns it to the Nid field.
func (o *EnrichmentRecord) SetNid(v string) {
	o.Nid = &v
}

func (o EnrichmentRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrichmentRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nid) {
		toSerialize["nid"] = o.Nid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnrichmentRecord) UnmarshalJSON(bytes []byte) (err error) {
	varEnrichmentRecord := _EnrichmentRecord{}

	if err = json.Unmarshal(bytes, &varEnrichmentRecord); err == nil {
		*o = EnrichmentRecord(varEnrichmentRecord)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "nid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnrichmentRecord struct {
	value *EnrichmentRecord
	isSet bool
}

func (v NullableEnrichmentRecord) Get() *EnrichmentRecord {
	return v.value
}

func (v *NullableEnrichmentRecord) Set(val *EnrichmentRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentRecord(val *EnrichmentRecord) *NullableEnrichmentRecord {
	return &NullableEnrichmentRecord{value: val, isSet: true}
}

func (v NullableEnrichmentRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


