/*
Klarity Integrations

REST API for managing Estate Records using Klarity Integrations. You can enrich your estate by creating new kinds of estate records or extending existing ones. Before making use of the API, you must first register your External Integration in Klarity, which provides you with the required authentication credentials. Then, you use those credentials to obtain a Token that allows you to make authorized calls to Klarityâ€™s REST API for External Integration.

API version: 0.0.5
Contact: products@nordcloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integrations

import (
	"encoding/json"
	"fmt"
)

// InsertInPeriodEnum Enum type of billing periods available in External Integrations for inserting. Setting to previous allows for inserting in previous period. Default is current if not provided.
type InsertInPeriodEnum string

// List of InsertInPeriodEnum
const (
	CURRENT InsertInPeriodEnum = "current"
	PREVIOUS InsertInPeriodEnum = "previous"
)

// All allowed values of InsertInPeriodEnum enum
var AllowedInsertInPeriodEnumEnumValues = []InsertInPeriodEnum{
	"current",
	"previous",
}

func (v *InsertInPeriodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InsertInPeriodEnum(value)
	for _, existing := range AllowedInsertInPeriodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InsertInPeriodEnum", value)
}

// NewInsertInPeriodEnumFromValue returns a pointer to a valid InsertInPeriodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInsertInPeriodEnumFromValue(v string) (*InsertInPeriodEnum, error) {
	ev := InsertInPeriodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InsertInPeriodEnum: valid values are %v", v, AllowedInsertInPeriodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InsertInPeriodEnum) IsValid() bool {
	for _, existing := range AllowedInsertInPeriodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InsertInPeriodEnum value
func (v InsertInPeriodEnum) Ptr() *InsertInPeriodEnum {
	return &v
}

type NullableInsertInPeriodEnum struct {
	value *InsertInPeriodEnum
	isSet bool
}

func (v NullableInsertInPeriodEnum) Get() *InsertInPeriodEnum {
	return v.value
}

func (v *NullableInsertInPeriodEnum) Set(val *InsertInPeriodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertInPeriodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertInPeriodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertInPeriodEnum(val *InsertInPeriodEnum) *NullableInsertInPeriodEnum {
	return &NullableInsertInPeriodEnum{value: val, isSet: true}
}

func (v NullableInsertInPeriodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertInPeriodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

