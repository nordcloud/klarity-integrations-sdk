"""
    Klarity Integrations

    REST API for managing Estate Records using Klarity Integrations. You can enrich your estate by creating new kinds of estate records or extending existing ones. Before making use of the API, you must first register your External Integration in Klarity, which provides you with the required authentication credentials. Then, you use those credentials to obtain a Token that allows you to make authorized calls to Klarityâ€™s REST API for External Integration.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: products@nordcloud.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from klarity_integrations.api_client import ApiClient, Endpoint as _Endpoint
from klarity_integrations.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from klarity_integrations.model.accepted_response_body import AcceptedResponseBody
from klarity_integrations.model.error_response import ErrorResponse
from klarity_integrations.model.estate_records_request_body import EstateRecordsRequestBody


class KlarityIntegrationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __v1_estate_records_post(
            self,
            **kwargs
        ):
            """Manage Klarity estate records  # noqa: E501

            Create Klarity estate records or update their metadata, tags and costs. Metadata, tags and costs updating works as a data upserting. If you will not provide one of them, it will not be updated.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_estate_records_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                estate_records_request_body (EstateRecordsRequestBody): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AcceptedResponseBody
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_estate_records_post = _Endpoint(
            settings={
                'response_type': (AcceptedResponseBody,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/estateRecords',
                'operation_id': 'v1_estate_records_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'estate_records_request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'estate_records_request_body':
                        (EstateRecordsRequestBody,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'estate_records_request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__v1_estate_records_post
        )
